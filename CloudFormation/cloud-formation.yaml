AWSTemplateFormatVersion: 2010-09-09
Description: Resources needed for Crumbs Application stack

Parameters:
  KeyName:
    Description: KeyPair for Bastion Host
    Type: AWS::EC2::KeyPair::KeyName

  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  
  DBUsername:
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

Resources:

  # VPC 
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: Crumbs VPC
  
  # Internet Gateway
  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Crumbs VPC IGW

  # Attaching Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGW
      VpcId: !Ref VPC

  # Public Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'us-east-1a'
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1 (AZ1)

  # Public Subnet
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'us-east-1b'
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2 (AZ2)

  # Private Subnet
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'us-east-1a'
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1 (AZ1)

  # Private Subnet
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'us-east-1b'
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2 (AZ2)

  # Elastic IP Address for NatGateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # NatGateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public RT
  
  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private RT

  # Route for Public Route Table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW

  # Route for Private Route Table
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Associating Public Subnet to Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Associating Public Subnet to Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Associating Private Subnet to Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  # Associating Private Subnet to Private Route Table
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security Group for Application Load Balancer
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB-SG

  # Bastion Security Group
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables SSH Access to Bastion Hosts
      VpcId: !Ref VPC
      SecurityGroupIngress:  
        - IpProtocol: tcp  
          FromPort: 22 
          ToPort: 22  
          CidrIp: ## PUT YOUR PUBLIC IP ADDRESS HERE ##

  # Container Security Group
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable all access from ALBSecurityGroup and Bastion
      Tags:
        - Key: Name
          Value: Container-SG

  # Database Security Group
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable all access from bastion and container security group
      Tags:
        - Key: Name
          Value: Database-SG

  # Allow Traffic From Bastion Security Group
  ContainerSGWithBastionIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ContainerSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt BastionSecurityGroup.GroupId
  
  # Allow Traffic From ALB Security Group
  ContainerSGWithALBSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ContainerSecurityGroup.GroupId
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId

  # Allow Traffic From Bastion Security Group
  DatabaseSGWithBastionIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DatabaseSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt BastionSecurityGroup.GroupId
  
  # Allow Traffic From Container Security Group
  DatabaseSGWithContainerSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DatabaseSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt ContainerSecurityGroup.GroupId
  
  # Application Load Balancer
  ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
          Name: Application-Load-Balancer
          Scheme: internet-facing
          Type: application
          Subnets: 
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups: 
            - !GetAtt ALBSecurityGroup.GroupId
          IpAddressType: ipv4

  # ALB Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AccountServiceTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  # MySQL Database
  RelationalDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: crumbs-db
      DBSubnetGroupName: !Ref PrivateSubnetGroup
      DBName: CrumbsDatabase
      DBInstanceClass: db.t2.micro
      AllocatedStorage: '20'
      Engine: MySQL
      EngineVersion: 8.0.16
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup

  # Subnet Group
  PrivateSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: PrivateSubnetGroup
      DBSubnetGroupDescription: Subnet Group for private subnets
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # Bastion Instance
  BastionEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-087c17d1fe0178315
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: Bastion Host

  # FARGATE Cluster
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: CrumbsFargateCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  # Container Execution Role
  ContainerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Crumbs-ContainerExecutionRole
      Description: Role for containers
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  
  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Crumbs-TaskExecutionRole
      Description: Role for tasks
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole

  # Account Service
  AccountService:
    Type: AWS::ECS::Service
    DependsOn: AccountServiceListenerRule
    Properties:
      ServiceName: AccountService
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AccountServiceTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: account-service
          ContainerPort: 8080
          TargetGroupArn: !Ref AccountServiceTargetGroup

  # Account Service Target Group
  AccountServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/actuator/health'
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 5
      Name: account-service-tg
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      VpcId: !Ref VPC

  # Account Service Listener Rule
  AccountServiceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: path-pattern
          Values:
            - /account-service/**
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AccountServiceTargetGroup
      ListenerArn: !Ref Listener
      Priority: 2

  # Fargate Task Definition for Account Service
  AccountServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref TaskExecutionRole
      ExecutionRoleArn: !Ref ContainerExecutionRole
      ContainerDefinitions:
        - Name: account-service
          Image: 041821275788.dkr.ecr.us-east-1.amazonaws.com/account-service
          PortMappings:
            - ContainerPort: 8080
          Essential: true
      NetworkMode: awsvpc

  # Order Service
  OrderService:
    Type: AWS::ECS::Service
    DependsOn: OrderServiceListenerRule
    Properties:
      ServiceName: OrderService
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref OrderServiceTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      HealthCheckGracePeriodSeconds: 300  
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: order-service
          ContainerPort: 8010
          TargetGroupArn: !Ref OrderServiceTargetGroup

  # Order Service Target Group
  OrderServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/actuator/health'
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 5
      Name: order-service-tg
      Protocol: HTTP
      Port: 8010
      TargetType: ip
      VpcId: !Ref VPC

  # Order Service Listener Rule
  OrderServiceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: path-pattern
          Values:
            - /order-service/**
      Actions:
        - Type: forward
          TargetGroupArn: !Ref OrderServiceTargetGroup
      ListenerArn: !Ref Listener
      Priority: 3

  # Fargate Task Definition for Order Service
  OrderServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref TaskExecutionRole
      ExecutionRoleArn: !Ref ContainerExecutionRole
      ContainerDefinitions:
        - Name: order-service
          Image: 041821275788.dkr.ecr.us-east-1.amazonaws.com/order-service
          PortMappings:
            - ContainerPort: 8010
          Essential: true
      NetworkMode: awsvpc

  # Payment Service
  PaymentService:
    Type: AWS::ECS::Service
    DependsOn: PaymentServiceListenerRule
    Properties:
      ServiceName: PaymentService
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref PaymentServiceTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      HealthCheckGracePeriodSeconds: 300
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: payment-service
          ContainerPort: 8090
          TargetGroupArn: !Ref PaymentServiceTargetGroup

  # Payment Service Target Group
  PaymentServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/actuator/health'
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 5
      Name: payment-service-tg
      Protocol: HTTP
      Port: 8090
      TargetType: ip
      VpcId: !Ref VPC

  # Payment Service Listener Rule
  PaymentServiceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: path-pattern
          Values:
            - /payment-service/**
      Actions:
        - Type: forward
          TargetGroupArn: !Ref PaymentServiceTargetGroup
      ListenerArn: !Ref Listener
      Priority: 4

  # Fargate Task Definition for Payment Service
  PaymentServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref TaskExecutionRole
      ExecutionRoleArn: !Ref ContainerExecutionRole
      ContainerDefinitions:
        - Name: payment-service
          Image: 041821275788.dkr.ecr.us-east-1.amazonaws.com/payment-service
          PortMappings:
            - ContainerPort: 8090
          Essential: true
      NetworkMode: awsvpc

  # Restaurant Service
  RestaurantService:
    Type: AWS::ECS::Service
    DependsOn: RestaurantServiceListenerRule
    Properties:
      ServiceName: RestaurantService
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref RestaurantServiceTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      HealthCheckGracePeriodSeconds: 300
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: restaurant-service
          ContainerPort: 8070
          TargetGroupArn: !Ref RestaurantServiceTargetGroup

  # Restaurant Service Target Group
  RestaurantServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/actuator/health'
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 5
      Name: restaurant-service-tg
      Protocol: HTTP
      Port: 8070
      TargetType: ip
      VpcId: !Ref VPC

  # Restaurant Service Listener Rule
  RestaurantServiceListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: path-pattern
          Values:
            - /restaurant-service/**
      Actions:
        - Type: forward
          TargetGroupArn: !Ref RestaurantServiceTargetGroup
      ListenerArn: !Ref Listener
      Priority: 5

  # Fargate Task Definition for Restaurant Service
  RestaurantServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref TaskExecutionRole
      ExecutionRoleArn: !Ref ContainerExecutionRole
      ContainerDefinitions:
        - Name: restaurant-service
          Image: 041821275788.dkr.ecr.us-east-1.amazonaws.com/restaurant-service
          PortMappings:
            - ContainerPort: 8070
          Essential: true
      NetworkMode: awsvpc

Outputs:
  BastionHostIP:
    Description: Public Ip of Bastion Host
    Value: !GetAtt BastionEC2Instance.PublicDnsName
  DatabaseEndpoint:
    Description: The database endpoint
    Value: !GetAtt RelationalDatabase.Endpoint.Address