AWSTemplateFormatVersion: 2010-09-09
Description: "ECS Cluster and Microservices"

Parameters:
  MicroserviceTemplateURL:
    Description: S3 Bucket URL for Microservice CloudFormation Template
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC to host Fargate tasks inside
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 2
  ContainerSecurityGroup:
    Description: Container Security Group
    Type: AWS::EC2::SecurityGroup::Id

Resources:
  # FARGATE Cluster
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: CrumbsFargateCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
          
  # Container Execution Role
  ContainerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Crumbs-ContainerExecutionRole
      Description: Role for containers
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CWLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
                Effect: Allow
  
  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Crumbs-TaskExecutionRole
      Description: Role for tasks
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole

  # Account Service
  AccountService:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ServiceName: AccountService
        ContainerName: accountservice
        ContainerPort: 8080
        Cluster: !Ref ECSCluster
        TaskExecutionRole: !Ref TaskExecutionRole
        ContainerExecutionRole: !Ref ContainerExecutionRole
        Priority: 2
        VPC: !Ref VPC
        PrivateSubnet1: !Ref PrivateSubnet1
        PrivateSubnet2: !Ref PrivateSubnet2
        Listener: !Ref Listener
        ContainerSecurityGroup: !Ref ContainerSecurityGroup
        ListenerRulePath: account-service
      TemplateURL: !Ref MicroserviceTemplateURL
      TimeoutInMinutes: 30
  
  # Order Service
  OrderService:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ServiceName: OrderService
        ContainerName: orderservice
        ContainerPort: 8010
        Cluster: !Ref ECSCluster
        TaskExecutionRole: !Ref TaskExecutionRole
        ContainerExecutionRole: !Ref ContainerExecutionRole
        Priority: 3
        VPC: !Ref VPC
        PrivateSubnet1: !Ref PrivateSubnet1
        PrivateSubnet2: !Ref PrivateSubnet2
        Listener: !Ref Listener
        ContainerSecurityGroup: !Ref ContainerSecurityGroup 
        ListenerRulePath: order-service
      TemplateURL: !Ref MicroserviceTemplateURL
      TimeoutInMinutes: 30

  # Restaurant Service
  RestaurantService:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ServiceName: RestaurantService
        ContainerName: restaurantservice
        ContainerPort: 8070
        Cluster: !Ref ECSCluster
        TaskExecutionRole: !Ref TaskExecutionRole
        ContainerExecutionRole: !Ref ContainerExecutionRole
        Priority: 4
        VPC: !Ref VPC
        PrivateSubnet1: !Ref PrivateSubnet1
        PrivateSubnet2: !Ref PrivateSubnet2
        Listener: !Ref Listener
        ContainerSecurityGroup: !Ref ContainerSecurityGroup 
        ListenerRulePath: restaurant-service
      TemplateURL: !Ref MicroserviceTemplateURL
      TimeoutInMinutes: 30

  # Payment Service
  PaymentService:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ServiceName: PaymentService
        ContainerName: paymentservice
        ContainerPort: 8090
        Cluster: !Ref ECSCluster
        TaskExecutionRole: !Ref TaskExecutionRole
        ContainerExecutionRole: !Ref ContainerExecutionRole
        Priority: 5
        VPC: !Ref VPC
        PrivateSubnet1: !Ref PrivateSubnet1
        PrivateSubnet2: !Ref PrivateSubnet2
        Listener: !Ref Listener
        ContainerSecurityGroup: !Ref ContainerSecurityGroup 
        ListenerRulePath: payment-service
      TemplateURL: !Ref MicroserviceTemplateURL
      TimeoutInMinutes: 30
  
  # Email Service
  EmailService:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ServiceName: EmailService
        ContainerName: emailservice
        ContainerPort: 8100
        Cluster: !Ref ECSCluster
        TaskExecutionRole: !Ref TaskExecutionRole
        ContainerExecutionRole: !Ref ContainerExecutionRole
        Priority: 6
        VPC: !Ref VPC
        PrivateSubnet1: !Ref PrivateSubnet1
        PrivateSubnet2: !Ref PrivateSubnet2
        Listener: !Ref Listener
        ContainerSecurityGroup: !Ref ContainerSecurityGroup
        ListenerRulePath: email-service
      TemplateURL: !Ref MicroserviceTemplateURL
      TimeoutInMinutes: 30
  
  # ALB Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
      LoadBalancerArn: !Sub '{{resolve:secretsmanager:dev/crumbs/alb/arn:SecretString}}'
      SslPolicy: ELBSecurityPolicy-2016-08
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Sub '{{resolve:secretsmanager:dev/crumbs/listener/cert:SecretString}}'




  # Default Target Group
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /actuator/health
      Name: default-tg
      Protocol: HTTP
      Port: 80
      TargetType: ip
      VpcId: !Ref VPC